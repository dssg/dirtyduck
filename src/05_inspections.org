#+STARTUP: showeverything
#+STARTUP: nohideblocks
#+STARTUP: indent
#+STARTUP: align
#+STARTUP: inlineimages
#+STARTUP: latexpreview
#+PROPERTY: header-args:sql :engine postgresql
#+PROPERTY: header-args:sql+ :dbhost 0.0.0.0
#+PROPERTY: header-args:sql+ :dbport 5434
#+PROPERTY: header-args:sql+ :dbuser food_user
#+PROPERTY: header-args:sql+ :dbpassword some_password
#+PROPERTY: header-args:sql+ :database food
#+PROPERTY: header-args:sql+ :results table drawer
#+PROPERTY: header-args:sql+ :exports both
#+PROPERTY: header-args:sql+ :eval no-export
#+PROPERTY: header-args:sql+ :cmdline -q
#+PROPERTY: header-args:sh  :results verbatim org
#+PROPERTY: header-args:sh+ :prologue exec 2>&1 :epilogue :
#+PROPERTY: header-args:ipython   :session food_inspections
#+PROPERTY: header-args:ipython+ :results raw drawer
#+OPTIONS: broken-links:mark
#+OPTIONS: tasks:todo
#+OPTIONS: LaTeX:t

* Inpection prioritization
** Problem description

 We will begin with the *inspection prioritization* problem. We want to generate a list of
   facilities that will have a *critical* or *serious* food violation /if/ inspected.

The scenario is the following: you work for the City of Chicago and you have
  limited food inspectors, so you try to prioritize them to focus on the highest-risk
  facilities. So you will use the data to answer the next question:

#+begin_quote
Which X facilities are most likely to fail a food inspection in the
  following Y period of time?
#+end_quote

If you want to focus on major violations only, you can do that too:

#+begin_quote
Which X facilities are most likely to have a critical or serious
  violation in the following Y period of time?
#+end_quote


** Creating the labels

We will define two labels:

- *Which facilities are likely to fail an inspection?*

The label takes a 1 if the inspection had at least one =result= = ='fail'= and a 0 otherwise.

- *Which facilities fail an inspection with a major violation?*

Critical violations are coded between =1-14=, serious violations between
=15-29=, everything above =30= is assumed to be a minor violation.
The label takes a 1 if the inspection had at least one =result= = ='fail'= and a
violation between 1 and 29, and a 0 otherwise.

We can extract the severity of the violation using the
following code:


#+begin_src sql
select
    event_id,
    entity_id,
    date,
    result,
    array_agg(distinct obj ->>'severity') as violations_severity,
    (result = 'fail') as failed,
    coalesce(
    (result = 'fail' and
        ('serious' = ANY(array_agg(obj ->> 'severity')) or 'critical' = ANY(array_agg(obj ->> 'severity')))
        ), false
    ) as failed_major_violation
from
    (
    select
        event_id,
        entity_id,
        date,
        result,
        jsonb_array_elements(violations::jsonb) as obj
    from
        semantic.events
        limit 20
        ) as t1
group by
    entity_id, event_id, date, result
order by
    date desc;
#+end_src

#+RESULTS:
:RESULTS:
| event_id | entity_id |       date | result | violations_severity       | failed | failed_major_violation |
|---------+----------+------------+--------+--------------------------+--------+----------------------|
| 1770568 |    30852 | 2016-05-11 | pass   | {minor}                  | f      | f                    |
| 1763967 |    30852 | 2016-05-03 | fail   | {critical,minor,serious} | t      | t                    |
| 1434534 |    21339 | 2014-04-03 | pass   | {NULL}                   | f      | f                    |
| 1343315 |    22056 | 2013-06-06 | fail   | {minor,serious}          | t      | t                    |
| 1235707 |    21339 | 2013-03-27 | pass   | {NULL}                   | f      | f                    |
|  537439 |    13471 | 2011-06-10 | fail   | {NULL}                   | t      | f                    |
|  569377 |     5592 | 2011-06-01 | pass   | {NULL}                   | f      | f                    |
:END:

Remember from the section [[Cohorts, labels, event dates and as of dates][Cohorts, labels, event dates and as of dates]] that the /outcome/ will be used by
=triage= to generate the labels. The following image tries to
show the meaning of the /outcomes/ for the /inspection failed/ problem definition.

#+NAME: fig:outcomes-inspections
#+CAPTION: The image shows three facilities and, next to each, a temporal line with 6 days (0-5). Each dot represents an inspection. Green means the facility passed the inspection, and red means it failed. Each facility in the image had two inspections, but only the facility in the middle passed both.
#+ATTR_ORG: :width 600 :height 400
#+ATTR_HTML: :width 600 :height 600
#+ATTR_LATEX: :width 400 :height 300
[[./images/outcomes-inspections.png]]



** Modeling Using Machine Learning

It is time to put these steps together. All the coding is complete
(=triage= dev team did that for us); we just need to modify the =triage=
configuration file.

*** Defining a baseline

As a first step, lets do an experiment that defines our
/baseline/. The rationale of this is that the knowing the /baseline/ will
allow us to verify if our Machine Learning model is better than the
baseline.  It is also very fast to train ( =DummyClassifier= is not
computationally expensive, so it will
help us to verify that the experiment configuration is correct without
waiting for a long time)

We need to write the experiment config file for that. Let's break it
down and explain the sections.

The config file for this first experiment is located in
[[./triage/experiment_config/inspections_baseline.yaml][triage/experiment_config/inspections_baseline.yaml]].

The first lines of the experiment config file specify the
config-file version (=v6= at the moment of writing this tutorial),
a comment (=model_comment=, which will end up as
a value in the =model_metadata.models= table), and a list of user-defined
metadata (=user_metadata=) that can help to identify the
resulting model groups. For this example, if you run experiments that share
a temporal configuration but that use different label definitions
(say, labeling inspections with *any* violation as positive versus
only labeling inspections with major violations as positive),
you can use the user metadata keys to indicate that the matrices
from these experiments have different labeling criteria. The matrices from the
two experiments will have different filenames (and should not be overwritten or
incorrectly used), and if you add the =label_definition= key to
the =model_group_keys=, models made on different label definitions will
belong to different model groups.

#+BEGIN_SRC yaml :tangle ../triage/experiment_config/inspections_baseline.yaml
config_version: 'v6'

model_comment: 'inspections: baseline'

user_metadata:
    label_definition: 'failed'
    experiment_type: 'inspections prioritization'
    description: |
      Baseline calculation
    purpose: 'baseline'
    org: 'DSaPP'
    team: 'Tutorial'
    author: 'Your name here'
    etl_date: '2019-01-18'

model_group_keys:
  - 'class_path'
  - 'parameters'
  - 'feature_names'
  - 'feature_groups'
  - 'cohort_name'
  - 'state'
  - 'label_name'
  - 'label_timespan'
  - 'training_as_of_date_frequency'
  - 'max_training_history'
  - 'label_definition'
  - 'experiment_type'
  - 'org'
  - 'team'
  - 'author'
  - 'purpose'
  - 'etl_date'


#+END_SRC

(Obviously, change ='Your name here'= for your name)

Next comes the *temporal configuration* section. The first four parameters
are related to the availability of data: How much data you have for
feature creation? How much data you have for label generation? For
simplicity we will assume that we can use the full =semantic.events= time
span for both.

#+BEGIN_SRC sql
select min(date), max(date) from semantic.events
#+END_SRC

#+RESULTS:
:RESULTS:
|        min |        max |
|------------+------------|
| 2010-01-04 | 2019-01-18 |
:END:

The next parameters are related to the training intervals:
- How frequently to retrain models? (=model_update_frequency=)
- How many rows per entity in the train matrices?
  (=training_as_of_date_frequencies=)
- How much time is covered by labels in the training matrices? (=training_label_timespans=)

The remaining elements are related to the *testing* matrices.
For *inspections*, you can choose them as follows:

- =test_as_of_date_frequencies= is planning/scheduling frequency
- =test_durations= how far ahead do you schedule inspections?
- =test_label_timespan= is equal to =test_durations=

Let's assume that we need to do rounds of inspections every month
(=test_as_of_date_frequencies = 1month=) and we need to complete that
round in exactly one month (=test_durations = test_label_timespan =
1month=).

We will assume that the data is more or less stable[fn:1], at least for one
year, so =model_update_frequency= = =1 year.=

#+BEGIN_SRC yaml :tangle ../triage/experiment_config/inspections_baseline.yaml
temporal_config:
    feature_start_time: '2010-01-04'
    feature_end_time: '2019-01-01'
    label_start_time: '2015-02-01'
    label_end_time: '2019-01-01'

    model_update_frequency: '1y'
    training_label_timespans: ['1month']
    training_as_of_date_frequencies: '1month'

    test_durations: '1y'
    test_label_timespans: ['1month']
    test_as_of_date_frequencies: '1month'

    max_training_histories: '5y'
#+END_SRC

We can visualize the splitting using the function =show-timechop=
introduced in [[file:triage_intro.org][Introduction to triage]].

#+BEGIN_SRC sh :dir /docker:root@tutorial_bastion:/triage :results silent

# Remember to run this in bastion  NOT in your laptop shell!
triage showtimechops experiment_config/inspections_baseline.yaml
#+END_SRC

#+CAPTION: Temporal blocks for inspections_dt experiment
#+ATTR_ORG: :width 600 :height 400
#+ATTR_HTML: :width 800 :height 800
#+ATTR_LATEX: :width 400 :height 300
[[./images/inspections_baseline.png]]

We need to specify our labels. For this first
experiment we will use the label =failed=, using the same query from the
=simple_skeleton_experiment.yaml=

#+BEGIN_SRC yaml :tangle ../triage/experiment_config/inspections_baseline.yaml
label_config:
  query: |
    select
    entity_id,
    bool_or(result = 'fail')::integer as outcome
    from semantic.events
    where '{as_of_date}'::timestamp <= date
    and date < '{as_of_date}'::timestamp + interval '{label_timespan}'
    group by entity_id
  name: 'failed_inspections'
#+END_SRC

We just want to include *active* facilities in our matrices, so we tell
=triage= to take that in account:

#+BEGIN_SRC yaml :tangle ../triage/experiment_config/inspections_baseline.yaml
cohort_config:
  query: |
    select entity_id
    from semantic.entities
    where
    daterange(start_time, end_time, '[]') @> '{as_of_date}'::date
  name: 'active_facilities'
#+END_SRC

=Triage= will generate the features for us, but we need to tell it which features
we want in the section =feature_aggregations=. Here, each entry describes a
=collate.SpacetimeAggregation= object and the
arguments needed to create it. For this experiment, we will use only
one feature (number of inspections). =DummyClassifier= don't use any
feature to do the "prediction", so we won't expend compute cycles
doing the feature/matrix creation:

#+BEGIN_SRC yaml :tangle ../triage/experiment_config/inspections_baseline.yaml
feature_aggregations:
  -
    prefix: 'inspections'
    from_obj: 'semantic.events'
    knowledge_date_column: 'date'

    aggregates_imputation:
      count:
        type: 'zero_noflag'

    aggregates:
      -
        quantity:
          total: "*"
        metrics:
          - 'count'

    intervals: ['all']

    groups:
      - 'entity_id'

feature_group_definition:
   prefix:
     - 'inspections'

feature_group_strategies: ['all']
#+END_SRC

If we observe the image generated from the =temporal_config= section,
each particular date is the beginning of the rectangles that describes
the rows in the matrix. In that date (=as_of_date= in =timechop= parlance)
we will calculate both features, and we will repeat that for every
other rectangle in that image.

Now, let's discuss how we will specify the models to try
(remember that the model is specified by the algorithm, the
hyperparameters, and the subset of features to use). In =triage= you
need to specify in the =grid_config= section a list of machine learning
algorithms that you want to train and a list of
hyperparameters. You can use any algorithm that you want; the only
requirement is that it respects the =sklearn= API.

#+BEGIN_SRC yaml :tangle ../triage/experiment_config/inspections_baseline.yaml
grid_config:
    'sklearn.dummy.DummyClassifier':
        strategy: [prior,uniform, most_frequent]
#+END_SRC

Finally, we should define wich metrics we care about for evaluating our
model. Here we will concentrate only in =precision= and =recall=.

#+BEGIN_SRC yaml :tangle ../triage/experiment_config/inspections_baseline.yaml
scoring:
    testing_metric_groups:
        -
          metrics: [precision@, recall@]
          thresholds:
            percentiles: [1.0, 2.0, 3.0, 4.0, 5.0, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]
            top_n: [1, 5, 10, 25, 50, 100, 250, 500, 1000]


    training_metric_groups:
      -
        metrics: [accuracy]
      -
        metrics: [precision@, recall@]
        thresholds:
          percentiles: [1.0, 2.0, 3.0, 4.0, 5.0, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]
          top_n: [1, 5, 10, 25, 50, 100, 250, 500, 1000]
#+END_SRC

You should be warned that precision and recall at $k$ in this setting
is kind of ill-defined (because you will end with a lot of =NULL=
labels, remember, only a few of facilities are inspected in each
period)[fn:2].

We will want a *list* of facilities to
be inspected. The length of our list is constrained by our inspection
resources, i.e. the answer to the question /How many facilities can I
inpect in a month?/ In this experiment we are assuming that the
maximum capacity is *50* but we are testing also for a list of length
*5*, and *10* (see =top_n= above).

The execution of the experiments can take a long time, so it is a
good practice to /validate/ the configuration file /before/ running
the model. You don't want to wait for hours (or days) and then
discover that something went wrong.

#+BEGIN_SRC sh :dir /docker:root@tutorial_bastion:/ :results silent

# Remember to run this in bastion  NOT in your laptop shell!
triage experiment experiment_config/inspections_baseline.yaml  --validate-only
#+END_SRC

If everything was ok, you should see an =Experiment validation ran to completion with no errors=.

You can execute the experiment as[fn:3]

#+BEGIN_SRC sh :dir /docker:root@tutorial_bastion:/ :results silent
# Remember to run this in bastion  NOT in your laptop shell!
triage experiment experiment_config/inspections_baseline.yaml --profile
#+END_SRC


This will print a lot of output, and if everything is correct it will
create *6* matrices (3 for
training, 3 for testing) in =triage/matrices= and every matrix will be
represented by two files, one with the metadata of the matrix (a
=yaml= file) and one with the actual matrix (the =csv= file).

#+BEGIN_SRC sh :dir /docker:root@tutorial_bastion:/triage :results raw drawer

# We will use some bash magic

ls matrices | awk -F . '{print $NF}' | sort | uniq -c
#+END_SRC

#+RESULTS:
:RESULTS:
      6 csv
      6 yaml
:END:

=Triage= also will store *9* trained models in =triage/trained_models=:

#+BEGIN_SRC sh :dir /docker:root@tutorial_bastion:/triage :results raw drawer
ls trained_models | wc -l
#+END_SRC

#+RESULTS:
:RESULTS:
9
:END:

And it will populate the =results= schema in the database. As
mentioned, we will get *3* /model groups/:

#+BEGIN_SRC sql
select
    model_group_id,
    model_type,
    hyperparameters
from
    model_metadata.model_groups;
#+END_SRC

#+RESULTS:
:RESULTS:
| model_group_id | model_type                     | hyperparameters              |
|--------------+-------------------------------+------------------------------|
|            1 | sklearn.dummy.DummyClassifier | {"strategy": "prior"}        |
|            2 | sklearn.dummy.DummyClassifier | {"strategy": "uniform"}      |
|            3 | sklearn.dummy.DummyClassifier | {"strategy": "most_frequent"} |
:END:


And *9* /models/:

#+BEGIN_SRC sql
select
    model_group_id,
    array_agg(model_id) as models,
    array_agg(train_end_time) as train_end_times
from
    model_metadata.models
group by
    model_group_id
order by
    model_group_id
#+END_SRC

#+RESULTS:
:RESULTS:
| model_group_id | models  | train_end_times                                                       |
|--------------+---------+---------------------------------------------------------------------|
|            1 | {1,4,7} | {"2015-12-01 00:00:00","2016-12-01 00:00:00","2017-12-01 00:00:00"} |
|            2 | {2,5,8} | {"2015-12-01 00:00:00","2016-12-01 00:00:00","2017-12-01 00:00:00"} |
|            3 | {3,6,9} | {"2015-12-01 00:00:00","2016-12-01 00:00:00","2017-12-01 00:00:00"} |
:END:

From that last query, you should note that the order in which =triage= trains
the models is from oldest to newest =train_end_time= and
=model_group= , also in ascending order. It will not go to the
next block until all the /models groups/ are trained.

You can check with which matrix the models are trained:

#+BEGIN_SRC sql
select
    model_group_id,
    model_id, train_end_time,
    model_hash, train_matrix_uuid,
    ma.num_observations as observations,
    ma.lookback_duration as feature_lookback_duration,  ma.feature_start_time
from
    model_metadata.models as mo
    join
    model_metadata.matrices as ma
    on train_matrix_uuid = matrix_uuid
order by
    model_group_id,
    train_end_time asc;
#+END_SRC

#+RESULTS:
:RESULTS:
| model_group_id | model_id | train_end_time        | model_hash                        | train_matrix_uuid                  | observations | feature_lookback_duration | feature_start_time    |
|--------------+---------+---------------------+----------------------------------+----------------------------------+--------------+-------------------------+---------------------|
|            1 |       1 | 2015-12-01 00:00:00 | d3cea395750042c6ce8b4b16629b7f27 | 82a55ba9d2013abb7722c20b17500b57 |        10763 | @ 5 years               | 2010-01-04 00:00:00 |
|            1 |       4 | 2016-12-01 00:00:00 | 6ec07f83562b515c46b1ef7d6c76e5f4 | a6a067fbbf34115a48201a626f17e67a |        25036 | @ 5 years               | 2010-01-04 00:00:00 |
|            1 |       7 | 2017-12-01 00:00:00 | 6356a11ad724fa48ef2751d13f11801c | e8663158b8c6b131505f12fafd196e8d |        38673 | @ 5 years               | 2010-01-04 00:00:00 |
|            2 |       2 | 2015-12-01 00:00:00 | 74fee6432b12350f25c62bdf4c499a82 | 82a55ba9d2013abb7722c20b17500b57 |        10763 | @ 5 years               | 2010-01-04 00:00:00 |
|            2 |       5 | 2016-12-01 00:00:00 | a011aa2bad1cecaa3ba3a7e579efa80a | a6a067fbbf34115a48201a626f17e67a |        25036 | @ 5 years               | 2010-01-04 00:00:00 |
|            2 |       8 | 2017-12-01 00:00:00 | 36d38ecf8f2b3b433eb7c4dc5a048577 | e8663158b8c6b131505f12fafd196e8d |        38673 | @ 5 years               | 2010-01-04 00:00:00 |
|            3 |       3 | 2015-12-01 00:00:00 | 062f34c179e27cc779f050f7678f87a3 | 82a55ba9d2013abb7722c20b17500b57 |        10763 | @ 5 years               | 2010-01-04 00:00:00 |
|            3 |       6 | 2016-12-01 00:00:00 | abd9adc61fce6b64ad4a52461e894f51 | a6a067fbbf34115a48201a626f17e67a |        25036 | @ 5 years               | 2010-01-04 00:00:00 |
|            3 |       9 | 2017-12-01 00:00:00 | cb89c4cc25bf9ca6746ab899d9805c74 | e8663158b8c6b131505f12fafd196e8d |        38673 | @ 5 years               | 2010-01-04 00:00:00 |
:END:

As expected, we have three models per model group. Each model was trained
with the matrix indicated in the column =train_matrix_uuid=. This =uuid=
is the file name of the stored matrix. The model itself was
stored under the file named with the =model_hash=.

If you want to see in which matrix the model was /tested/ you need to
run the following query


#+BEGIN_SRC  sql
select distinct
    model_id,
    model_group_id, train_end_time,
    model_hash,
    pr.matrix_uuid as test_matrix_uuid,
    ma.num_observations as observations,
    ma.lookback_duration as feature_lookback_duration,  ma.feature_start_time
from
    model_metadata.models as mo
    join
    test_results.predictions as pr using (model_id)
    join
    model_metadata.matrices as ma on pr.matrix_uuid = ma.matrix_uuid
order by
    model_group_id, train_end_time asc;
#+END_SRC

#+RESULTS:
:RESULTS:
| model_id | model_group_id | train_end_time        | model_hash                        | test_matrix_uuid                   | observations | feature_lookback_duration | feature_start_time    |
|---------+--------------+---------------------+----------------------------------+----------------------------------+--------------+-------------------------+---------------------|
|       1 |            1 | 2015-12-01 00:00:00 | d3cea395750042c6ce8b4b16629b7f27 | ce3fb740876bfe04aa05e0a6ec9dbd69 |       228584 | @ 1 year                | 2010-01-04 00:00:00 |
|       4 |            1 | 2016-12-01 00:00:00 | 6ec07f83562b515c46b1ef7d6c76e5f4 | 9e6d30009128903d2cb30ddfa4de6daf |       236914 | @ 1 year                | 2010-01-04 00:00:00 |
|       7 |            1 | 2017-12-01 00:00:00 | 6356a11ad724fa48ef2751d13f11801c | 54137d5f48f70e52e4dae0a681c7476c |       246585 | @ 1 year                | 2010-01-04 00:00:00 |
|       2 |            2 | 2015-12-01 00:00:00 | 74fee6432b12350f25c62bdf4c499a82 | ce3fb740876bfe04aa05e0a6ec9dbd69 |       228584 | @ 1 year                | 2010-01-04 00:00:00 |
|       5 |            2 | 2016-12-01 00:00:00 | a011aa2bad1cecaa3ba3a7e579efa80a | 9e6d30009128903d2cb30ddfa4de6daf |       236914 | @ 1 year                | 2010-01-04 00:00:00 |
|       8 |            2 | 2017-12-01 00:00:00 | 36d38ecf8f2b3b433eb7c4dc5a048577 | 54137d5f48f70e52e4dae0a681c7476c |       246585 | @ 1 year                | 2010-01-04 00:00:00 |
|       3 |            3 | 2015-12-01 00:00:00 | 062f34c179e27cc779f050f7678f87a3 | ce3fb740876bfe04aa05e0a6ec9dbd69 |       228584 | @ 1 year                | 2010-01-04 00:00:00 |
|       6 |            3 | 2016-12-01 00:00:00 | abd9adc61fce6b64ad4a52461e894f51 | 9e6d30009128903d2cb30ddfa4de6daf |       236914 | @ 1 year                | 2010-01-04 00:00:00 |
|       9 |            3 | 2017-12-01 00:00:00 | cb89c4cc25bf9ca6746ab899d9805c74 | 54137d5f48f70e52e4dae0a681c7476c |       246585 | @ 1 year                | 2010-01-04 00:00:00 |
:END:

All the models were stored in
=/triage/trained_models/{model_hash}=
using the standard serialization of sklearn models. Every model was
trained with the matrix =train_matrix_uuid=
 stored in the directory =/triage/matrices=.


What's the performance of this model groups?

#+BEGIN_SRC  sql :async
select distinct
    model_group_id,
    model_id,
    ma.feature_start_time::date,
    train_end_time::date,
    ev.evaluation_start_time::date,
    ev.evaluation_end_time::date,
    to_char(ma.num_observations, '999,999') as observations,
    to_char(ev.num_labeled_examples, '999,999') as labeled_examples,
    to_char(ev.num_labeled_above_threshold, '999,999') as labeled_above_threshold,
    to_char(ev.num_positive_labels, '999,999') as total_positive_labels,
    to_char(ev.num_positive_labels*1.0 / ma.num_observations, '0.999') as baserate,
    to_char(ev.value, '0.999') as "precision@100%"
from
    model_metadata.models as mo
    join
    test_results.predictions as pr using (model_id)
    join
    model_metadata.matrices as ma on pr.matrix_uuid = ma.matrix_uuid
    join
    test_results.evaluations as ev using(model_id)
where
    ev.metric || ev.parameter = 'precision@100_pct'
order by
    train_end_time asc, model_group_id
#+END_SRC

#+RESULTS:
:RESULTS:
| model_group_id | model_id | feature_start_time | train_end_time | evaluation_start_time | evaluation_end_time | observations | labeled_examples | labeled_above_threshold | total_positive_labels | baserate | precision@100% |
|--------------+---------+------------------+--------------+---------------------+-------------------+--------------+-----------------+-----------------------+---------------------+----------+----------------|
|            1 |       1 |       2010-01-04 |   2015-12-01 |          2015-12-01 |        2016-11-01 | 228,584      | 14,273          | 14,273                | 3,460               |    0.015 |          0.242 |
|            2 |       2 |       2010-01-04 |   2015-12-01 |          2015-12-01 |        2016-11-01 | 228,584      | 14,273          | 14,273                | 3,460               |    0.015 |          0.242 |
|            3 |       3 |       2010-01-04 |   2015-12-01 |          2015-12-01 |        2016-11-01 | 228,584      | 14,273          | 14,273                | 3,460               |    0.015 |          0.242 |
|            1 |       4 |       2010-01-04 |   2016-12-01 |          2016-12-01 |        2017-11-01 | 236,914      | 13,637          | 13,637                | 3,203               |    0.014 |          0.235 |
|            2 |       5 |       2010-01-04 |   2016-12-01 |          2016-12-01 |        2017-11-01 | 236,914      | 13,637          | 13,637                | 3,203               |    0.014 |          0.235 |
|            3 |       6 |       2010-01-04 |   2016-12-01 |          2016-12-01 |        2017-11-01 | 236,914      | 13,637          | 13,637                | 3,203               |    0.014 |          0.235 |
|            1 |       7 |       2010-01-04 |   2017-12-01 |          2017-12-01 |        2018-11-01 | 246,585      | 10,490          | 10,490                | 2,449               |    0.010 |          0.233 |
|            2 |       8 |       2010-01-04 |   2017-12-01 |          2017-12-01 |        2018-11-01 | 246,585      | 10,490          | 10,490                | 2,449               |    0.010 |          0.233 |
|            3 |       9 |       2010-01-04 |   2017-12-01 |          2017-12-01 |        2018-11-01 | 246,585      | 10,490          | 10,490                | 2,449               |    0.010 |          0.233 |
:END:

The columns =num_labeled_examples, num_labeled_above_threshold,
num_positive_labels= represent the number of selected entities on the
prediction date that are labeled, the
number of entities with a positive label above the threshold, and the
number of entities with positive labels among all the
labeled entities  respectively.

*** Creating a simple experiment: ML as a Data Mining technique

For the first experiment we will try one of the simplest
machine learning algorithms: a *Decision Tree Classifier* (/DT/)
The rationale of this is that the DT is very fast to train (so it will
help us to verify that the experiment configuration is correct without
waiting for a long time) and it helps you
to understand the structure of your data.

The config file for this first experiment is located in
[[./triage/experiment_config/inspections_dt.yaml]]

Note that we don't modify the =temporal_config= section neither the
=feature_aggregations=, =cohort_config= or =label_config=. Triage is smart
enough to use the previous tables and matrices instead of generating
them from scratch.

#+BEGIN_SRC yaml :tangle ../triage/experiment_config/inspections_dt.yaml
config_version: 'v6'

model_comment: 'inspections: DT'

user_metadata:
  label_definition: 'failed'
  experiment_type: 'inspections prioritization'
  description: |
    Decision Tree Classifier
  purpose: 'data mining'
  org: 'DSaPP'
  team: 'Tutorial'
  author: 'Your name here'
  etl_date: '2019-01-18'

#+END_SRC

#+BEGIN_SRC yaml :tangle ../triage/experiment_config/inspections_dt.yaml :export none
model_group_keys:
  - 'class_path'
  - 'parameters'
  - 'feature_names'
  - 'feature_groups'
  - 'cohort_name'
  - 'state'
  - 'label_name'
  - 'label_timespan'
  - 'training_as_of_date_frequency'
  - 'max_training_history'
  - 'label_definition'
  - 'experiment_type'
  - 'org'
  - 'team'
  - 'author'
  - 'purpose'
  - 'etl_date'

temporal_config:
    feature_start_time: '2010-01-04'
    feature_end_time: '2019-01-01'
    label_start_time: '2015-02-01'
    label_end_time: '2019-01-01'

    model_update_frequency: '1y'
    training_label_timespans: ['1month']
    training_as_of_date_frequencies: '1month'

    test_durations: '1y'
    test_label_timespans: ['1month']
    test_as_of_date_frequencies: '1month'

    max_training_histories: '5y'

label_config:
  query: |
    select
    entity_id,
    bool_or(result = 'fail')::integer as outcome
    from semantic.events
    where '{as_of_date}'::timestamp <= date
    and date < '{as_of_date}'::timestamp + interval '{label_timespan}'
    group by entity_id
  name: 'failed_inspections'

cohort_config:
  query: |
    select entity_id
    from semantic.entities
    where
    daterange(start_time, end_time, '[]') @> '{as_of_date}'::date
  name: 'active_facilities'

#+END_SRC

Note that we don't modify the =temporal_config= section neither the
=cohort_config= or =label_config=. Triage is smart
enough to use the previous tables and matrices instead of generating
them from scratch.

For this experiment, we will add the following features:

- Number of different types of inspections the facility had in the last year
  (calculated for an as-of date).

- Number of different types of inspections that happened in the
  zip code in the last year from a particular day.



#+BEGIN_SRC yaml :tangle ../triage/experiment_config/inspections_dt.yaml
feature_aggregations:
  -
    prefix: 'inspections'
    from_obj: 'semantic.events'
    knowledge_date_column: 'date'

    aggregates_imputation:
      count:
        type: 'zero_noflag'

    aggregates:
      -
        quantity:
          total: "*"
        metrics:
          - 'count'

    intervals: ['1month', '3month', '6month', '1y', 'all']

    groups:
      - 'entity_id'

  -
    prefix: 'risks'
    from_obj: 'semantic.events'
    knowledge_date_column: 'date'

    categoricals_imputation:
      sum:
        type: 'zero'
      avg:
        type: 'zero'

    categoricals:
      -
        column: 'risk'
        choices: ['low', 'medium', 'high']
        metrics:
          - 'sum'
          - 'avg'

    intervals: ['1month', '3month', '6month', '1y', 'all']

    groups:
      - 'entity_id'
      - 'zip_code'

  -
    prefix: 'results'
    from_obj: 'semantic.events'
    knowledge_date_column: 'date'

    categoricals_imputation:
      all:
        type: 'zero'

    categoricals:
      -
        column: 'result'
        choice_query: 'select distinct result from semantic.events'
        metrics:
          - 'sum'
          - 'avg'

    intervals: ['1month', '3month', '6month', '1y', 'all']

    groups:
      - 'entity_id'

  -
    prefix: 'inspection_types'
    from_obj: 'semantic.events'
    knowledge_date_column: 'date'

    categoricals_imputation:
      sum:
        type: 'zero_noflag'

    categoricals:
      -
        column: 'type'
        choice_query: 'select distinct type from semantic.events where type is not null'
        metrics:
          - 'sum'

    intervals: ['1month', '3month', '6month', '1y', 'all']

    groups:
      - 'entity_id'
      - 'zip_code'

#+END_SRC

And as stated, we will train some Decision Trees


#+BEGIN_SRC yaml :tangle ../triage/experiment_config/inspections_dt.yaml
grid_config:
    'sklearn.tree.DecisionTreeClassifier':
        max_depth: [2,10,~]
        min_samples_split: [2,5]
#+END_SRC

Some of the parameters in =sklearn= are =None=. If you want to try those
you need to indicate it with =yaml='s =null= or =~= keyword.

Besides the algorithm and the hyperparameters, you should specify
which subset of features use. First, in the section
=feature_group_definition= you specify how to group the features (you
can use the =table name= or the =prefix= from the section
=feature_aggregation=) and then a /strategy/ for choosing the
subsets: =all= (all the subsets at once), =leave-one-out= (try all the
subsets except one, do that for all the combinations), or =leave-one-in=
(just try subset at the time).


#+BEGIN_SRC yaml :tangle ../triage/experiment_config/inspections_dt.yaml
feature_group_definition:
   prefix:
     - 'inspections'
     - 'results'
     - 'risks'
     - 'inspection_types'

feature_group_strategies: ['all']
#+END_SRC

Finally we will leave the =scoring= section as before.

#+BEGIN_SRC yaml :exports none :tangle ../triage/experiment_config/inspections_dt.yaml
scoring:
    testing_metric_groups:
        -
          metrics: [precision@, recall@]
          thresholds:
            percentiles: [1.0, 2.0, 3.0, 4.0, 5.0, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]
            top_n: [1, 5, 10, 25, 50, 100, 250, 500, 1000]


    training_metric_groups:
      -
        metrics: [accuracy]
      -
        metrics: [precision@, recall@]
        thresholds:
          percentiles: [1.0, 2.0, 3.0, 4.0, 5.0, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]
          top_n: [1, 5, 10, 25, 50, 100, 250, 500, 1000]
#+END_SRC

In this experiment we will end with *5* model groups
(number of algorithms [1] $\times$ number of hyperparameter combinations [2
$\times$ 3 = 5] $\times$ number of feature groups strategies [1]]). Also, we will create *15* models (3 per
model group) given that we have 3 temporal blocks (one model per temporal group).

Before running the experiment, remember to validate that the
configuration is correct:

#+BEGIN_SRC sh :dir /docker:root@tutorial_bastion:/ :results silent

# Remember to run this in bastion  NOT in your laptop shell!
triage experiment experiment_config/inspections_dt.yaml  --validate-only
#+END_SRC

You can execute the experiment like this:


#+BEGIN_SRC sh :dir /docker:root@tutorial_bastion:/ :results silent
# Remember to run this in bastion  NOT in your laptop shell!
triage experiment experiment_config/inspections_baseline.yaml --no-save-predictions --profile
#+END_SRC





The features used by that model are:

#+BEGIN_SRC sql
select
    unnest(feature_list) as features
from
    model_metadata.model_groups
where
    model_group_id = 1
limit 10;
#+END_SRC

#+RESULTS:
:RESULTS:
| features                                           |
|----------------------------------------------------|
| inspections_entity_id_1month_total_count                |
| inspections_entity_id_1y_total_count                    |
| inspections_entity_id_3month_total_count                |
| inspections_entity_id_6month_total_count                |
| inspections_entity_id_all_total_count                   |
| inspection_types_entity_id_1month_type_canvass_sum        |
| inspection_types_entity_id_1month_type_complaint_sum      |
| inspection_types_entity_id_1month_type_consultation_sum   |
| inspection_types_entity_id_1month_type_food poisoning_sum |
| inspection_types_entity_id_1month_type_license_sum        |
:END:


Finally, the performance of the model =7=  are:

#+BEGIN_SRC sql
select
    model_id,
    metric || parameter as metric,
    value,
    num_labeled_examples,
    num_labeled_above_threshold,
    num_positive_labels
from
    test_results.evaluations
where
    metric || parameter = 'precision@10.0_pct'
order by
    num_labeled_above_threshold asc,
    metric asc;
#+END_SRC

#+RESULTS:
:RESULTS:
| model_id | metric            |               value | num_labeled_examples | num_labeled_above_threshold | num_positive_labels |
|---------+-------------------+---------------------+--------------------+--------------------------+-------------------|
|      10 | precision@10.0_pct |   0.301792828685259 |              10490 |                     1004 |              2449 |
|       9 | precision@10.0_pct |   0.301792828685259 |              10490 |                     1004 |              2449 |
|      11 | precision@10.0_pct | 0.33541341653666146 |              10490 |                     1282 |              2449 |
|      12 | precision@10.0_pct | 0.33514774494556765 |              10490 |                     1286 |              2449 |
|       6 | precision@10.0_pct | 0.29917106254709874 |              13637 |                     1327 |              3203 |
|       5 | precision@10.0_pct | 0.29917106254709874 |              13637 |                     1327 |              3203 |
|       3 | precision@10.0_pct |  0.2864450127877238 |              14273 |                     1564 |              3460 |
|       4 | precision@10.0_pct |  0.3032178217821782 |              14273 |                     1616 |              3460 |
|       8 | precision@10.0_pct |  0.3256797583081571 |              13637 |                     1655 |              3203 |
|       7 | precision@10.0_pct |  0.3281343731253749 |              13637 |                     1667 |              3203 |
|       1 | precision@10.0_pct |  0.3380352644836272 |              14273 |                     1985 |              3460 |
|       2 | precision@10.0_pct |  0.3380352644836272 |              14273 |                     1985 |              3460 |
:END:






After the experiment finishes, you will get 3 new =model_groups= (1 per strategy)

#+BEGIN_SRC sql
select
    model_group_id,
    model_type,
    hyperparameters
from
    model_metadata.model_groups;
#+END_SRC

#+RESULTS:
:RESULTS:
| model_group_id | model_type                           | hyperparameters                           |
|--------------+-------------------------------------+-------------------------------------------|
|            1 | sklearn.tree.DecisionTreeClassifier | {"max_depth": 1, "max_features": 1}         |
|            2 | sklearn.tree.DecisionTreeClassifier | {"max_depth": 1, "max_features": "sqrt"}    |
|            3 | sklearn.tree.DecisionTreeClassifier | {"max_depth": 1, "max_features": null}      |
|            4 | sklearn.tree.DecisionTreeClassifier | {"max_depth": null, "max_features": 1}      |
|            5 | sklearn.tree.DecisionTreeClassifier | {"max_depth": null, "max_features": "sqrt"} |
|            6 | sklearn.tree.DecisionTreeClassifier | {"max_depth": null, "max_features": null}   |
|            7 | sklearn.dummy.DummyClassifier       | {"strategy": "prior"}                     |
|            8 | sklearn.dummy.DummyClassifier       | {"strategy": "uniform"}                   |
|            9 | sklearn.dummy.DummyClassifier       | {"strategy": "most_frequent"}              |
:END:

#+BEGIN_SRC sql
with baseline as (
select
    model_id,
    model_group_id
from
    model_metadata.models
where
    model_type ~ 'DummyClassifier'
)

select
    model_group_id,
    model_id,
    metric || parameter as metric,
    value
from
    test_results.evaluations
    inner join
    baseline using(model_id)
where
    metric || parameter = 'precision@25_abs'
order by
    metric || parameter, model_id;
#+END_SRC

#+RESULTS:
:RESULTS:
| model_group_id | model_id | metric          | value |
|--------------+---------+-----------------+-------|
|            7 |      19 | precision@25_abs |   0.0 |
|            8 |      20 | precision@25_abs |   0.0 |
|            9 |      21 | precision@25_abs |   0.0 |
|            7 |      22 | precision@25_abs |   0.0 |
|            8 |      23 | precision@25_abs |   0.0 |
|            9 |      24 | precision@25_abs |   0.0 |
|            7 |      25 | precision@25_abs |   0.5 |
|            8 |      26 | precision@25_abs |   0.5 |
|            9 |      27 | precision@25_abs |   0.5 |
:END:





*** A more advanced experiment

Ok, let's add a more complete experiment. First the usual generalities.
N
#+BEGIN_SRC yaml :tangle ../triage/experiment_config/inspections_label_failed_01.yaml
config_version: 'v6'

model_comment: 'inspections: advanced'

user_metadata:
  label_definition: 'failed'
  experiment_type: 'inspections prioritization'
  description: |
    Using Ensamble methods
  purpose: 'try ensamble algorithms'
  org: 'DSaPP'
  team: 'Tutorial'
  author: 'Your name here'
  etl_date: '2019-01-18'
#+END_SRC

As before, =triage= needs special tables that specify /outcomes/ (that is, call
=events_table=) and /states/. These are the
same; we didn't change anything.

#+BEGIN_SRC yaml :tangle ../triage/experiment_config/inspections_label_failed_01.yaml
label_config:
  query: |
    select
    entity_id,
    bool_or(result = 'fail')::integer as outcome
    from semantic.events
    where '{as_of_date}'::timestamp <= date
    and date < '{as_of_date}'::timestamp + interval '{label_timespan}'
    group by entity_id
  name: 'failed_inspections'

cohort_config:
  query: |
    select entity_id
    from semantic.entities
    where
    daterange(start_time, end_time, '[]') @> '{as_of_date}'::date
  name: 'active_facilities'
#+END_SRC

Neither to the temporal configuration:

#+BEGIN_SRC  yaml :tangle ../triage/experiment_config/inspections_label_failed_01.yaml
temporal_config:
    feature_start_time: '2010-01-04'
    feature_end_time: '2019-01-01'
    label_start_time: '2015-02-01'
    label_end_time: '2019-01-01'

    model_update_frequency: '1y'
    training_label_timespans: ['1month']
    training_as_of_date_frequencies: '1month'

    test_durations: '1y'
    test_label_timespans: ['1month']
    test_as_of_date_frequencies: '1month'

    max_training_histories: '5y'

#+END_SRC

As before, we can check the temporal structure of our crossvalidation:

#+BEGIN_SRC sh :dir /docker:root@tutorial_bastion:/triage :results silent

# Remember to run this in bastion  NOT in your laptop shell!
triage showtimechops experiment_config/inspections_label_failed_01.yaml
#+END_SRC

#+CAPTION: Temporal blocks for inspections experiment. The label is a failed inspection in the next month.
#+ATTR_ORG: :width 600 :height 400
#+ATTR_HTML: :width 800 :height 800
#+ATTR_LATEX: :width 400 :height 300
[[./images/inspections.png]]

The first big change is that we are adding 3 more /features groups/:
=inspections= (we already use this), =risks=, and =results=. Remember
that all this refers to events in the past, i.e. /How many times the facility was marked with high risk in the previous 3 Months?/,
/What is the average rate of failed inspections in the previous year?/

#+BEGIN_SRC yaml :tangle ../triage/experiment_config/inspections_label_failed_01.yaml
feature_aggregations:
  -
    prefix: 'inspections'
    from_obj: 'semantic.events'
    knowledge_date_column: 'date'

    aggregates_imputation:
      count:
        type: 'zero_noflag'

    aggregates:
      -
        quantity:
          total: "*"
        metrics:
          - 'count'

    intervals: ['1month', '3month', '6month', '1y', 'all']

    groups:
      - 'entity_id'

  -
    prefix: 'risks'
    from_obj: 'semantic.events'
    knowledge_date_column: 'date'

    categoricals_imputation:
      sum:
        type: 'zero'
      avg:
        type: 'zero'

    categoricals:
      -
        column: 'risk'
        choices: ['low', 'medium', 'high']
        metrics:
          - 'sum'
          - 'avg'

    intervals: ['1month', '3month', '6month', '1y', 'all']

    groups:
      - 'entity_id'
      - 'zip_code'

  -
    prefix: 'results'
    from_obj: 'semantic.events'
    knowledge_date_column: 'date'

    categoricals_imputation:
      all:
        type: 'zero'

    categoricals:
      -
        column: 'result'
        choice_query: 'select distinct result from semantic.events'
        metrics:
          - 'sum'
          - 'avg'

    intervals: ['1month', '3month', '6month', '1y', 'all']

    groups:
      - 'entity_id'

  -
    prefix: 'inspection_types'
    from_obj: 'semantic.events'
    knowledge_date_column: 'date'

    categoricals_imputation:
      sum:
        type: 'zero_noflag'

    categoricals:
      -
        column: 'type'
        choice_query: 'select distinct type from semantic.events where type is not null'
        metrics:
          - 'sum'

    intervals: ['1month', '3month', '6month', '1y', 'all']

    groups:
      - 'entity_id'
      - 'zip_code'

#+END_SRC

We want to use all the features groups
(=feature_group_definition=). The training will be made on matrices
with =all= the feature groups, then leaving one feature group out at a time,
=leave-one-out= (i.e. one model with =inspections= and =results=, another with
=inspections= and =risks=, and another with =results= and =risks), and finally
leaving one feature group in at a time (i.e. a model with =inspections= only,
another with =results= only, and a third with =risks= only).

#+BEGIN_SRC yaml :tangle ../triage/experiment_config/inspections_label_failed_01.yaml

feature_group_definition:
   prefix:
     - 'inspections'
     - 'results'
     - 'risks'
     - 'inspection_types'

feature_group_strategies: ['all', 'leave-one-in', 'leave-one-out']
#+END_SRC

Finally, we will try a =RandomForestClassifier=:


#+BEGIN_SRC yaml :tangle ../triage/experiment_config/inspections_label_failed_01.yaml
grid_config:
    'sklearn.ensemble.RandomForestClassifier':
        max_features: ['sqrt']
        criterion: ['gini']
        n_estimators: [100, 250]
        min_samples_split: [2,10]

scoring:
    testing_metric_groups:
        -
          metrics: [precision@, recall@]
          thresholds:
            percentiles: [1.0, 2.0, 3.0, 4.0, 5.0, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]
            top_n: [1, 5, 10, 25, 50, 100, 250, 500, 1000]

    training_metric_groups:
      -
        metrics: [accuracy]
      -
        metrics: [precision@, recall@]
        thresholds:
          percentiles: [1.0, 2.0, 3.0, 4.0, 5.0, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]
          top_n: [1, 5, 10, 25, 50, 100, 250, 500, 1000]

#+END_SRC

Before running, let's verify the configuration file

#+BEGIN_SRC sh :dir /docker:root@tutorial_bastion:/ :results silent

# Remember to run this in bastion  NOT in your laptop shell!
triage experiment experiment_config/inspections_label_failed_01.yaml  --validate-only
#+END_SRC

You can execute the experiment with



#+BEGIN_SRC sh :dir /docker:root@tutorial_bastion:/ :results silent
# Remember to run this in bastion  NOT in your laptop shell!
triage experiment experiment_config/inspections_label_failed_01.yaml --no-save-predictions --profile
#+END_SRC

This will take a looooong time to run.

Well, now we have a lot of models. How can you pick the best one?
We will show you when we model /Early Warning/.


* Footnotes

[fn:3] The flags =-no-save-predictions= and =profile= are not necessary
but useful. The first one configure triage to not store the
predictions (at this stage you don't need them, and you can always
could recreate them from the model and the matrix). This will save you
execution time. The flag =profile= stores the /execution/ profile times
in a file, so you can check which models or matrices are taking a lot
of time on been built.

[fn:2] We will explore how to one way to tackle this in the advance part of this tutorial.

[fn:1] You need to check this! Fortunately, =triage= allows you to try
several options here, so, if you think that this is too high or too
low you can change that and fit your needs.
