#+STARTUP: showeverything
#+STARTUP: nohideblocks
#+STARTUP: indent
#+STARTUP: align
#+STARTUP: inlineimages
#+STARTUP: latexpreview
#+PROPERTY: header-args:sql :engine postgresql
#+PROPERTY: header-args:sql+ :dbhost 0.0.0.0
#+PROPERTY: header-args:sql+ :dbport 5434
#+PROPERTY: header-args:sql+ :dbuser food_user
#+PROPERTY: header-args:sql+ :dbpassword some_password
#+PROPERTY: header-args:sql+ :database food
#+PROPERTY: header-args:sql+ :results table drawer
#+PROPERTY: header-args:sql+ :cmdline -q
#+PROPERTY: header-args:sh  :results verbatim org
#+PROPERTY: header-args:sh+ :prologue exec 2>&1 :epilogue :
#+PROPERTY: header-args:ipython   :session Food_inspections
#+PROPERTY: header-args:ipython+ :results raw drawer
#+OPTIONS: broken-links:mark
#+OPTIONS: tasks:todo
#+OPTIONS: LaTeX:t


* Description of the problem

  This tutorial aims to introduce the reader to [[https://github.com/dssg/triage][triage]], a machine learning modeling tool built by the [[https://dsapp.uchicago.edu][Center for Data Science and Public Policy]].
  We will use the well-known [[https://data.cityofchicago.org/Health-Human-Services/Food-Inspections/4ijn-s7e5][Chicago Food Inspections dataset]].[fn:1]

  We will present the two problems that =triage= was built to model[fn:5]:

  1. *Resource prioritization* (internally known as the /inspections
     problem/)[fn:2] and
  2. *Early warning*.[fn:3]


** Inspection Prioritization

  In an ideal world, inspectors would frequently visit every food
  facility, every day[fn:4] to ensure it meets safety standards. But
  the real world doesn't have enough
  inspectors for that to happen, so the city needs to decide how to allocate
  its limited inspection workforce to find and remediate as many establishments
  with food hazards as possible. Assuming the city can inspect $n$ facilities
  in the next $X$ period of time, they can define the problem like this:

  #+CAPTION: How to define Chicago Food Inspections as an inspection-prioritization problem:
  #+begin_quote
    Which $n$ facilities will have a food violation in the
    following $X$ period of time?
  #+end_quote

  If our inspection workforce is really limited, we should probably just target
  the most serious violations. Then we'd define the problem like this:

  #+CAPTION: How to define Chicago Food Inspections as an inspection-prioritization problem that targets the most serious cases:
  #+begin_quote
    Which $n$ facilities will have a critical or serious violation in the
    following $X$ period of time?
  #+end_quote


** Early Warning
  Using the same data set, facility owners or managers would pose the
  ML problem as an early warning problem.
  They'd like to know whether an inspector is going to visit their facility
  so they can prepare for it. They can define the problem like this:

  #+CAPTION: How to define Chicago Food Inspections as an early warning problem:
  #+begin_quote
    Will my facility be inspected in the next $X$ period of time?
  #+end_quote

Note that in both cases, we are defining a period of time in which the
event potentially will happen.

** What do they have in common?
  For either problem, $X$ could be a day, a week, month, a quarter, a year, 56 days,
  or some other time period.

  Without going into detail, both problems use data where each
  row describes an *event* in which an *entity* was involved, and
  each event has a specific *outcome* or result.

  The *entity* for both inspection prioritizations and early warnings
  in this tutorial is a food /facility/, and the *event* is an inspection.
  But the *outcome* differs: for inspections the outcome is /inspection failed/
  or /major violation found/, while for early warning the outcome is
  /inspected/.

** How do they differ?

Besides the obvious (i.e. the label), these ML's problem formulations
have very different internal structure:

The /EIS/ problem *all* the entities of interest in a given period of
time *have* a label. The /Inspections/ problem does not have that
luxury: from all the existing entities of interest only a bunch are
/inspected/ that means that only those inspected have a label
(=True/False=) but all the remaining ones doesn't have one. This will be
reflected, for example in the /training/ matrices: you only train in the
facilities that were inspected (so you will have less rows in
them). Another impact will be in the metrics: you need to be very
careful about interpreting the metrics in an inspections
problem. Finally, when you are designing the field validation of your
model, you need to take in account this selection bias, if not, you
will be inspecting the same facilities over and over[fn:6]

* Footnotes

[fn:6] This points is particularly acute: Imagine the scenario in
which the /inspections/ problem is *crime prediction* in order to send
cops (inspectors)to that "risky" area (facilities)...

[fn:5] It is also possible to do "visit-level prediction" type of ML problem.

[fn:4] Defined as "bakery, banquet
hall, candy store, caterer, coffee shop, day care center (for ages less than 2), day care
center (for ages 2 – 6), day care center (combo, for ages less than 2 and 2 – 6
combined), gas station, Golden Diner, grocery store, hospital, long term care
center(nursing home), liquor store, mobile food dispenser, restaurant, paleteria, school,
shelter, tavern, social club, wholesaler, or Wrigley Field Rooftop"
([[https://data.cityofchicago.org/api/views/4ijn-s7e5/files/O9cwLJ4wvxQJ2MirxkNzAUCCMQiM31DMzRkckMsKlxc?download=true&filename=foodinspections_description.pdf][source]]).

[fn:3] Examples include [[http://dsapp.uchicago.edu/projects/education/][Increasing High School Graduation Rates: Early
Warnings and Predictive Systems]], [[http://dsapp.uchicago.edu/projects/public-safety/police-eis/][Building Data-Driven Early
Intervention Systems for Police Officers]], and [[http://dsapp.uchicago.edu/projects/criminal-justice/data-driven-justice-initiative/][Data-Driven Justice
Initiative: Identifying Frequent Users of Multiple Public Systems for
More Effective Early Assistance]].

[fn:2] Examples include [[http://dsapp.uchicago.edu/projects/environment/][Predictive Enforcement
of Hazardous Waste Regulations]] and [[http://dsapp.uchicago.edu/projects/health/lead-prevention/][Targeting Proactive Inspections for Lead Hazards]].

[fn:1] Several examples use this dataset, such as [[https://chicago.github.io/food-inspections-evaluation/][City of Chicago Food
Inspection Forecasting]],  [[https://youtu.be/lyDLAutA88s][PyCon 2016 keynote: Built in Super Heroes]],
and [[https://youtu.be/1dKonIT-Yak][PyData 2016: Forecasting critical food violations at restaurants
using open data]].
