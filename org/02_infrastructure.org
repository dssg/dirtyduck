#+STARTUP: showeverything
#+STARTUP: nohideblocks
#+STARTUP: indent
#+STARTUP: align
#+STARTUP: inlineimages
#+STARTUP: latexpreview
#+PROPERTY: header-args :cache yes
#+PROPERTY: header-args :eval never-export
#+PROPERTY: header-args:sql :engine postgresql
#+PROPERTY: header-args:sql+ :dbhost 0.0.0.0
#+PROPERTY: header-args:sql+ :dbport 5434
#+PROPERTY: header-args:sql+ :dbuser food_user
#+PROPERTY: header-args:sql+ :dbpassword some_password
#+PROPERTY: header-args:sql+ :database food
#+PROPERTY: header-args:sql+ :results table drawer
#+PROPERTY: header-args:sql+ :exports both
#+PROPERTY: header-args:sql+ :eval never-export
#+PROPERTY: header-args:sql+ :cmdline -q
#+PROPERTY: header-args:sh  :results verbatim org
#+PROPERTY: header-args:sh+ :prologue exec 2>&1 :epilogue :
#+PROPERTY: header-args:sh+ :eval never-export
#+PROPERTY: header-args:shell  :results verbatim org
#+PROPERTY: header-args:shell+ :prologue exec 2>&1 :epilogue :
#+PROPERTY: header-args:shell+ :eval never-export
#+PROPERTY: header-args:ipython   :session food_inspections
#+PROPERTY: header-args:ipython+ :results raw drawer
#+PROPERTY: header-args:ipython+ :eval never-export
#+BIND: org-export-use-babel nil
#+OPTIONS: broken-links:mark
#+OPTIONS: tasks:todo
#+OPTIONS: LaTeX:t

* Infrastructure

   In every data science project you will need several tools to
   help analyze the data in an efficient[fn:1] manner.
   Examples include a place to store the data (a database
   management system or *DBMS*); a way to put your model to work,
   i.e. a way that allows the model to ingest new data and make
   predictions (an *API*); and a way to examine the performance
   of trained models (monitor tools).

   This tutorial includes a script for managing the infrastructure[fn:2] in
   a transparent way.

   The infrastructure of this tutorial has /four/ pieces:
   - a =postgresql= database called =food_db=,
   - a container that executes =triage= experiments (we will use this
     when trying to scale up),
   - a container for interacting with the data called =bastion=.

   =bastion= includes a =postgresql= client
   (so you can interact with the database)[fn:3] and a full =python=
   environment (so you can code or modify the things for
   the tutorial).

   The only thing you need installed on your laptop is =docker=.

   From your command line (terminal) run the following from the repo directory:

   #+BEGIN_SRC shell  :dir .. :results output org :exports both
    ./tutorial.sh
   #+END_SRC

   #+RESULTS:
   #+BEGIN_SRC org
   Usage: ./tutorial.sh {start|stop|build|rebuild|run|logs|status|destroy|all|}

   OPTIONS:
      -h|help             Show this message
      start
      stop
      rebuild
      status
      destroy
      -t|triage
      -a|all

   INFRASTRUCTURE:
      Build the infrastructure:
           $ ./tutorial.sh start

      Check the status of the containers:
           $ ./tutorial.sh status

      Stop the tutorial's infrastructure:
           $ ./tutorial.sh stop

      Destroy all the resources related to the tutorial:
           $ ./tutorial.sh destroy

      View the infrastructure logs:
           $ ./tutorial.sh -l

   EXPERIMENTS:
      NOTE:
         The following commands assume that "sample_experiment_config.yaml"
         is located inside the triage/experiments directory

      Run one experiment:
           $ ./tutorial.sh -t --config_file sample_experiment_config.yaml run

      Run one experiment, do not replace existing matrices or models, and enable debug:
           $ ./tutorial.sh -t --config_file sample_experiment_config.yaml --no-replace --debug run

      Validate experiment configuration file:
           $ ./tutorial.sh triage --config_file sample_experiment_config.yaml validate

      Show the experiment's temporal cross-validation blocks:
           $ ./tutorial.sh -t --config_file sample_experiment_config.yaml show-temporal-blocks

      Plot model number 4 (for Decision Trees and Random Forests):
           $ ./tutorial.sh -t --config_file sample_experiment_config.yaml show_model_plot --model 4

      Triage help:
           $ ./tutorial.sh triage --help

   #+END_SRC


   Following the instructions on the screen, we can start the
   infrastructure with:

   #+BEGIN_SRC sh :dir .. :exports both :results silent
    ./tutorial.sh start
   #+END_SRC


   You can check that everything is running smoothly with =status=

   #+BEGIN_SRC sh :dir .. :results output org :exports both
    ./tutorial.sh status
   #+END_SRC

   #+RESULTS:
   #+BEGIN_SRC org
    Name                Command              State           Ports
   ------------------------------------------------------------------------
   food_db   docker-entrypoint.sh postgres   Up      0.0.0.0:5434->5432/tcp
   #+END_SRC

   To access the =postgresql= client type:

   #+BEGIN_SRC sh :eval never
   ./tutorial.sh bastion
   #+END_SRC

   Your prompt should change to something like:

   #+BEGIN_EXAMPLE shell
    root@485373fb3c64:/$
   #+END_EXAMPLE

   *NOTE*: The number you see will be different (i.e. not =485373fb3c64=).

   Inside =bastion=, type the next command to connect to the database

   #+BEGIN_SRC sh :eval never
   psql ${DATABASE_URL}
   #+END_SRC

   The prompt will change again to

#+BEGIN_EXAMPLE shell
   psql (9.6.7, server 10.2 (Debian 10.2-1.pgdg90+1))
   WARNING: psql major version 9.6, server major version 10.
         Some psql features might not work.
   Type "help" for help.

   food=#
#+END_EXAMPLE

   The previous command is using =psql=, a powerful command line client
   for the Postgresql database. If you want to use this client fully,
   check [[https://www.postgresql.org/docs/10/static/app-psql.html][psql's documentation]].

   The database is running and it's named =food=. It should contain a
   single table named =inspections= in the =schema= =raw=.
   Let's check the structure of the =inspections= table.
   Type the following command:

   #+BEGIN_SRC sql
    \d raw.inspections
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   | Table "raw.inspections" |                   |           |          |         |
   |-------------------------+-------------------+-----------+----------+---------|
   | Column                  | Type              | Collation | Nullable | Default |
   | inspection              | character varying |           | not null |         |
   | dba_name                 | character varying |           |          |         |
   | aka_name                 | character varying |           |          |         |
   | license_num              | numeric           |           |          |         |
   | facility_type            | character varying |           |          |         |
   | risk                    | character varying |           |          |         |
   | address                 | character varying |           |          |         |
   | city                    | character varying |           |          |         |
   | state                   | character varying |           |          |         |
   | zip                     | character varying |           |          |         |
   | date                    | date              |           |          |         |
   | type                    | character varying |           |          |         |
   | results                 | character varying |           |          |         |
   | violations              | character varying |           |          |         |
   | latitude                | numeric           |           |          |         |
   | longitude               | numeric           |           |          |         |
   | location                | character varying |           |          |         |
   :END:

   That's it. We will work from this table of raw data.

   You can disconnect from the database typing =\q=. But don't leave
   the database yet! We still need to do a lot of things [fn:4]

* Footnotes

[fn:4] Welcome to the not-so-sexy part of the (supposedly) /sexiest job/
of the XXI century.

[fn:3] If you have a postgresql client installed, you can use =psql -h 0.0.0.0 -p 5434 -d food -U food_user= rather than the =bastion= container.

[fn:2] And other things through this tutorial, like the execution of
the model training, etc.

[fn:1] Reproducible, scalable, flexible, etc.
